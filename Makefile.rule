###################################################################################################
#                                                                                                 #
# This file is part of BLASFEO.                                                                   #
#                                                                                                 #
# BLASFEO -- BLAS For Embedded Optimization.                                                      #
# Copyright (C) 2016-2018 by Gianluca Frison.                                                     #
# Developed at IMTEK (University of Freiburg) under the supervision of Moritz Diehl.              #
# All rights reserved.                                                                            #
#                                                                                                 #
# This program is free software: you can redistribute it and/or modify                            #
# it under the terms of the GNU General Public License as published by                            #
# the Free Software Foundation, either version 3 of the License, or                               #
# (at your option) any later version                                                              #.
#                                                                                                 #
# This program is distributed in the hope that it will be useful,                                 #
# but WITHOUT ANY WARRANTY; without even the implied warranty of                                  #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                   #
# GNU General Public License for more details.                                                    #
#                                                                                                 #
# You should have received a copy of the GNU General Public License                               #
# along with this program.  If not, see <https://www.gnu.org/licenses/>.                          #
#                                                                                                 #
# The authors designate this particular file as subject to the "Classpath" exception              #
# as provided by the authors in the LICENSE file that accompained this code.                      #
#                                                                                                 #
# Author: Gianluca Frison, gianluca.frison (at) imtek.uni-freiburg.de                             #
#                                                                                                 #
###################################################################################################

# Target architecture list
#
# X64_INTEL_HASWELL: x86_64 architecture with AVX2 and FMA ISA (64 bit OS)
# code optimized for Intel Haswell and Intel Skylake architectures.
#
# X64_INTEL_SANDY_BRIDGE : x86_64 architecture with AVX ISA (64 bit OS)
# code optimized for Intel Sandy-Bridge architecture.
#
# X64_INTEL_CORE : x86_64 architecture with SSE3 (64 bit OS)
# code optimized for Intel Core archiecture.
#
# X64_AMD_BULLDOZER : x86_64 architecture with AVX and FMA ISA (64 bit OS)
# code optimized for AMD Bulldozer.
#
# ARMV7A_ARM_CORTEX_A15 : ARMv7A architecture with NEON-VFPv4 ISA (32 bit OS)
# code optimized for ARM Cortex A15.
#
# ARMV8A_ARM_CORTEX_A57
#
# GENERIC : generic C code

# Select target architecture
#
TARGET = X64_INTEL_HASWELL
# TARGET = X64_INTEL_SANDY_BRIDGE
# TARGET = X64_INTEL_CORE
#
# TARGET = X64_AMD_BULLDOZER
# TARGET = X86_AMD_JAGUAR
# TARGET = X86_AMD_BARCELONA
#
# TARGET = ARMV8A_ARM_CORTEX_A57
# TARGET = ARMV8A_ARM_CORTEX_A53
# TARGET = ARMV7A_ARM_CORTEX_A15
# TARGET = ARMV7A_ARM_CORTEX_A7
#
# TARGET = GENERIC

# Select back-end LA version:
# high_performance: target-tailored; performance-optimized for cache resident matrices; panel-major matrix format
# reference: target-unspecific lightly-optimized; small code footprint; column-major matrix format
# BLAS_wrapper: call to external BLAS and LAPACK libraries; column-major matrix format
#
LA = HIGH_PERFORMANCE
# LA = REFERENCE
# LA = BLAS_WRAPPER

# For LA=BLAS_WRAPPER, select external BLAS and LAPACK implementation
#
REF_BLAS = 0
# REF_BLAS = SYSTEM
# REF_BLAS = OPENBLAS
# REF_BLAS = NETLIB
# REF_BLAS = MKL
# REF_BLAS = BLIS
# REF_BLAS = ATLAS

# Macro level (code size vs performance in assembly kernels):
# 0 (no macro), 1 (all macro but gemm kernel), 2 (all macro)
#
MACRO_LEVEL = 0

# Compile BLAS API routines (experimental)
BLAS_API = 0
# BLAS_API = 1

# Compile CBLAS API routines (experimental)
# CBLAS_API = 0
CBLAS_API = 1
#
# Export standard FORTRAN API for BLAS API routines (experimental)
FORTRAN_BLAS_API = 0
# FORTRAN_BLAS_API = 1

# Maximum K value for stack buffer size (decrease this value if stack size is exceeded)
K_MAX_STACK = 300

# Use C99 extension to math library
#
# USE_C99_MATH = 0
USE_C99_MATH = 1

# Compile auxiliary functions with external dependencies (for memory allocation, printing and timing)
#
# EXT_DEP = 0
EXT_DEP = 1

# Compile reference implementations with test_ prefix
# in order to check HIGH_PERFORMANCE routines against reference
#
TESTING_MODE = 0
# TESTING_MODE = 1

BENCHMARKS_MODE = 0
# BENCHMARKS_MODE = 1

# SANDBOX_MODE = 0
SANDBOX_MODE = 1

# Enable on-line checks for matrix and vector dimensions
#
RUNTIME_CHECKS = 0
# RUNTIME_CHECKS = 1

# Operating system (automatic selection)
#
UNAME_S := $(shell uname -s)
ifeq ($(UNAME_S),Linux)
    OS = LINUX
endif
ifeq ($(UNAME_S),Darwin)
    OS = MAC
endif
# Operating system (manual selection)
#
# OS = LINUX
# OS = MAC
# OS = WINDOWS

# C Compiler
#
CC = gcc
# CC = clang
# CC = x86_64-w64-mingw32-gcc
AR = ar

# Installation directory
PREFIX = /opt

# compiler / assembler / linker flags
#
# CFLAGS  =
ASFLAGS =
LDFLAGS =

# Common optimization flags
#
CFLAGS += -O2 -fPIC

# Debugging flags
#
CFLAGS  += #-g #-Wall -pedantic -Wfloat-equal #-pg
ASFLAGS += #-g


# Support local options
mkfile_path := $(abspath $(lastword $(MAKEFILE_LIST)))
current_dir := $(patsubst %/,%,$(dir $(mkfile_path)))
# Do not complain if Makefile.local does not exisist
-include $(current_dir)/Makefile.local

# Conditional Definitions

ifeq ($(LA), HIGH_PERFORMANCE)
CFLAGS  += -DLA_HIGH_PERFORMANCE
BINARY_DIR = build/$(LA)/$(TARGET)
endif
ifeq ($(LA), REFERENCE)
CFLAGS  += -DLA_REFERENCE
BINARY_DIR = build/$(LA)/$(TARGET)
endif
ifeq ($(LA), BLAS_WRAPPER)
CFLAGS  += -DLA_BLAS_WRAPPER
BINARY_DIR = build/$(LA)/$(REF_BLAS)
endif
CFLAGS  += -DLA=$(LA)

ifeq ($(BLAS_API), 1)
CFLAGS += -DBLAS_API
ASFLAGS += -DBLAS_API
endif
ifeq ($(FORTRAN_BLAS_API), 1)
CFLAGS += -DBLAS_API -DFORTRAN_BLAS_API
ASFLAGS += -DBLAS_API
endif

CFLAGS  += -DK_MAX_STACK=$(K_MAX_STACK)

ifeq ($(USE_C99_MATH), 1)
CFLAGS += -DUSE_C99_MATH
endif

ifeq ($(RUNTIME_CHECKS), 1)
CFLAGS += -DDIM_CHECK
endif

ifeq ($(EXT_DEP), 1)
CFLAGS += -DEXT_DEP
endif

ifeq ($(TESTING_MODE), 1)
CFLAGS += -DTESTING_MODE
endif

ifeq ($(BENCHMARKS_MODE), 1)
CFLAGS += -DBENCHMARKS_MODE
endif

ifeq ($(SANDBOX_MODE), 1)
CFLAGS += -DSANDBOX_MODE
endif

ifeq ($(MACRO_LEVEL), 1)
ASFLAGS += -DMACRO_LEVEL=1
endif
ifeq ($(MACRO_LEVEL), 2)
ASFLAGS += -DMACRO_LEVEL=2
endif

ifeq ($(OS), LINUX)
CFLAGS  += -DOS_LINUX
ASFLAGS += -DOS_LINUX
endif
ifeq ($(OS), MAC)
CFLAGS  += -DOS_MAC
ASFLAGS += -DOS_MAC
endif
ifeq ($(OS), WINDOWS)
CFLAGS  += -DOS_WINDOWS
ASFLAGS += -DOS_WINDOWS
endif
ifeq ($(SOC), DSPACE)
CFLAGS  += -D__DSPACE__
ASFLAGS += -D__DSPACE__
endif
ifeq ($(SOC), BACHMANN)
CFLAGS  += -D__BACHMANN__
ASFLAGS += -D__BACHMANN__
endif

# REF_BLAS

ifndef REF_BLAS
    REF_BLAS = 0
endif

ifeq ($(REF_BLAS), 0)
CFLAGS  +=
endif
ifeq ($(REF_BLAS), SYSTEM)
CFLAGS  += -DREF_BLAS_SYSTEM
endif
ifeq ($(REF_BLAS), OPENBLAS)
CFLAGS  += -DREF_BLAS_OPENBLAS -I/opt/openblas/include
endif
ifeq ($(REF_BLAS), BLIS)
CFLAGS  += -DREF_BLAS_BLIS -I/opt/blis/include/blis -std=c99
endif
ifeq ($(REF_BLAS), NETLIB)
CFLAGS  += -DREF_BLAS_NETLIB
endif
ifeq ($(REF_BLAS), MKL)
CFLAGS  += -DREF_BLAS_MKL -DMKL_DIRECT_CALL_SEQ -std=c99 -m64 -I/opt/intel/mkl/include
endif
ifeq ($(REF_BLAS), ATLAS)
CFLAGS  += -DREF_BLAS_ATLAS
endif

CFLAGS  += -DREF_BLAS=$(REF_BLAS)

# Architecture-specific flags
ifeq ($(TARGET), X64_INTEL_HASWELL)
CFLAGS  += -m64 -mavx2 -mfma -DTARGET_X64_INTEL_HASWELL
endif
ifeq ($(TARGET), X64_INTEL_SANDY_BRIDGE)
CFLAGS  += -m64 -mavx -DTARGET_X64_INTEL_SANDY_BRIDGE
endif
ifeq ($(TARGET), X64_INTEL_CORE)
CFLAGS  += -m64 -msse3 -DTARGET_X64_INTEL_CORE
endif
ifeq ($(TARGET), X64_AMD_BULLDOZER)
CFLAGS  += -m64 -mavx -mfma -DTARGET_X64_AMD_BULLDOZER
endif
ifeq ($(TARGET), X86_AMD_JAGUAR)
CFLAGS  += -m32 -mavx -DTARGET_X86_AMD_JAGUAR
ASFLAGS += -m32 -mavx -DTARGET_X86_AMD_JAGUAR
endif
ifeq ($(TARGET), X86_AMD_BARCELONA)
CFLAGS  += -m32 -msse3 -DTARGET_X86_AMD_BARCELONA
ASFLAGS += -m32 -msse3 -DTARGET_X86_AMD_BARCELONA
endif
ifeq ($(TARGET), ARMV8A_ARM_CORTEX_A57)
CFLAGS  += -march=armv8-a+crc+crypto+fp+simd -DTARGET_ARMV8A_ARM_CORTEX_A57
ASFLAGS += -DTARGET_ARMV8A_ARM_CORTEX_A57
endif
ifeq ($(TARGET), ARMV8A_ARM_CORTEX_A53)
CFLAGS  += -march=armv8-a+crc+crypto+fp+simd -DTARGET_ARMV8A_ARM_CORTEX_A53
ASFLAGS += -DTARGET_ARMV8A_ARM_CORTEX_A53
endif
ifeq ($(TARGET), ARMV7A_ARM_CORTEX_A15)
CFLAGS  += -marm -mfloat-abi=hard -mfpu=neon-vfpv4 -mcpu=cortex-a15 -DTARGET_ARMV7A_ARM_CORTEX_A15
ASFLAGS += -mfpu=neon-vfpv4 -DTARGET_ARMV7A_ARM_CORTEX_A15
endif
ifeq ($(TARGET), ARMV7A_ARM_CORTEX_A7)
CFLAGS  += -marm -mfloat-abi=hard -mfpu=neon-vfpv4 -mcpu=cortex-a7 -DTARGET_ARMV7A_ARM_CORTEX_A7
ASFLAGS += -mfpu=neon-vfpv4 -DTARGET_ARMV7A_ARM_CORTEX_A7
endif
ifeq ($(TARGET), GENERIC)
CFLAGS  += -DTARGET_GENERIC
endif
#
CFLAGS  += -DTARGET=$(TARGET)
